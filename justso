#!/bin/bash

# Global Variables

BTRFS_DEVICE=$(blkid --match-token TYPE="btrfs" --output device)
BTRFS_MOUNT=/root/toplevel
SNAPS="$BTRFS_MOUNT"/@snapshots
MNT_OPTS="rw,noatime,compress=zstd:1,space_cache=v2"
LATEST=1

# Functions

getLatest() {
    PROFILE=$1

    mount -o "$MNT_OPTS" "$BTRFS_DEVICE" "$BTRFS_MOUNT"

    if dirs=("$BTRFS_MOUNT"/@snapshots/"$PROFILE"/*/) && [[ -d ${dirs[0]} ]]; then
        LATEST=$(stat -c '%y %n' "$BTRFS_MOUNT"/@snapshots/"$PROFILE"/* | sort -n -r | head -n 1 | cut -f 4 -d " ")
    fi
}

back() {
    local PROFILE="$1"
    local HOME_FOLDER=/home/"$PROFILE"

    if getLatest "$PROFILE"; then
        printf 'Snapshots exist for %s.\nBeginning rollback to latest snapshot at %s\n' "$PROFILE" "$LATEST"
        umount "$HOME_FOLDER"
        btrfs subvolume delete -c "$BTRFS_MOUNT"/@"$PROFILE"
        btrfs subvolume snapshot "$LATEST" "$BTRFS_MOUNT"/@"$PROFILE"
        mount "$HOME_FOLDER"
        umount "$BTRFS_MOUNT"
    else
        echo "No snapshots exist for '$PROFILE'"
        umount "$BTRFS_MOUNT"
        exit 2
    fi
}

make() { # create a new profile revertable profile
    local PROFILE="$1"
    local HOME_FOLDER=/home/"$PROFILE"
    local NOW
    NOW=$(date --iso-8601=seconds)

    # If fstab backup folder doesn't exist, create it
    if [ ! -d /root/fstab_backup ]; then
        mkdir /root/fstab_backup
    fi

    # create user w/o home folder (will be created manually later)
    useradd -M -s /bin/bash "$PROFILE"

    # set password
    passwd "$PROFILE"

    # mount toplevel
    mount -o "$MNT_OPTS" "$BTRFS_DEVICE" "$BTRFS_MOUNT"

    # create subvolume
    btrfs subvolume create "${BTRFS_MOUNT}/@${PROFILE}"

    # create entry in fstab
    ROOT_LINE=$(grep subvol=@" " /etc/fstab)
    TEMP_ENTRY=${ROOT_LINE//subvol=@/subvol=@"$PROFILE"}
    NEW_ENTRY=${TEMP_ENTRY/\//\/home/"$PROFILE"}
    echo "$NEW_ENTRY"

    # Create a backup of fstab
    cp -a /etc/fstab /root/fstab_backup/fstab."${NOW}".bak

    # Insert "NEW_ENTRY" into fstab
    sed --in-place "/^.*\/home\s/a $NEW_ENTRY" /etc/fstab

    # make home folder
    mkdir "$HOME_FOLDER"

    # mount btrfs subvolume and set ownership
    mount "$HOME_FOLDER"
    chown "$PROFILE":"$PROFILE" /home/"$PROFILE"

    # Propulate the home folder with default files and folders
    su -c "cp -r /etc/skel/. /home/$PROFILE" "$PROFILE"
    su -c xdg-user-dirs-update "$PROFILE"

    # create folder in /.snapshots
    if [ ! -d "${SNAPS}/${PROFILE}" ]; then
        mkdir "${SNAPS}/${PROFILE}"
    fi

    # take initial snapshot
    btrfs subvolume snapshot -r "$HOME_FOLDER" "${SNAPS}/${PROFILE}/${PROFILE}-${NOW}"

    # unmount toplevel
    umount "$BTRFS_MOUNT"

}

init() { #C reates environment for justso
    echo "Hello world, I'm init"
    # Checking for folder at /root/fstab_backup
    if [ ! -d /root/fstab_backup ]; then
        mkdir /root/fstab_backup >/dev/null 2>&1
        echo "Created folder at /root/fstab_backup"
    else
        echo "Folder exists at /root/fstab_backup"
    fi
    # Checking for folder at /root/toplevel
    if [ ! -d /root/toplevel ]; then
        mkdir /root/toplevel >/dev/null 2>&1
        echo "Created folder at /root/toplevel"
    else
        echo "Folder exists at /root/toplevel"
    fi
    # Attempting to mount root volume at /root/toplevel
    if grep -q 'root/toplevel\s' /etc/fstab && grep -q 'root/toplevel\s' /etc/mtab; then
        echo "/root/toplevel is already mounted"
    else
        (mount /root/toplevel && echo "Mounted /root/toplevel") || "Failed to mount /root/toplevel"
    fi

    #Checking for the existence of @snapshots subvolume
    if btrfs subvolume show /root/toplevel/@snapshots >/dev/null 2>&1; then
        echo "@snapshots subvolume exists"
    else
        if btrfs subvolume create /root/toplevel/@snapshots >/dev/null 2>&1; then
            echo "Successfully created @snapshots subvolume"
        else
            "There was an error creating the @snapshots subvolume: Error $?"
        fi
    fi

    # Unmount /root/toplevel

    if umount "$BTRFS_MOUNT"; then
        echo "/root/toplevel unmounted successfully!"
    else
        echo "Problem unmounting /root/toplevel: Error $?"
    fi

}

pin() { #Creates a new snapshot of a profile
    echo "Hello world, I'm pin"
    local PROFILE="$1"
    local HOME_FOLDER=/home/"$PROFILE"
    local NOW
    NOW=$(date --iso-8601=seconds)

    mount "$BTRFS_DEVICE" "$BTRFS_MOUNT"
    btrfs subvolume snapshot -r "$HOME_FOLDER" "${SNAPS}/${PROFILE}/${PROFILE}-${NOW}"
    umount "$BTRFS_MOUNT"
}

unpin() { #Removes the latest n snapshots defaults to 1
    echo "Hello world, I'm unpin.  Looks like you wanna rollback $2 snapshot(s)"
}

revert() { #Unpins and rolls profile back to previous profile
    echo "Hellow world, I am unpin that's just a little tidier."
}

prune() { #Removes the N number of oldest snapshots
    echo "Hello, I'm prune.  I take care of your old snapshots"
}

destroy() { #Completely removes a profile
    echo "Hello world, I am destroy.  Destroyer of profiles"
}

#Determine which function the user passed in to the command

case "$1" in
"") ;;
prune)
    "$@"
    exit
    ;;
revert)
    "$@"
    exit
    ;;
destroy)
    "$@"
    exit
    ;;
unpin)
    "$@"
    exit
    ;;
pin)
    "$@"
    exit
    ;;
init)
    "$@"
    exit
    ;;
back)
    "$@"
    exit
    ;;
make)
    "$@"
    exit
    ;;
*)
    echo "Unknown function: $1"
    exit 2
    ;;
esac
